import{j as e}from"./jsx-runtime-ed146b25.js";import{u as w,e as M,M as y,f as p,P as N,d as _}from"./axios.api-b23b7fa1.js";import{u as k,F as v,C as I}from"./index.esm-73804e6c.js";import{B as u}from"./react-toastify.esm-fa44d8c4.js";import{c as q,a as f,e as D,g as F}from"./boardThunks-6a9384cc.js";import{I as A}from"./Input-73fe76b1.js";import{B as P}from"./Button-65c196bc.js";/* empty css              */import"./index-c6dae603.js";import"./DropdownMenu-134c1456.js";import"./transition-349f38e8.js";import"./Select-93b2da57.js";const n=({isNew:t,isEdit:m,boardId:a})=>{const o=w(),c=M(r=>r.board.boardItemData),s=k({mode:"onChange"}),l=()=>{s.reset(),o(p("createNewBoard")),o(p(`editBoard_${a}`))},g=async r=>{if(t&&(await o(q(r.title)),u.success(`Success! You've create new board '${r.title}'.`),l(),o(f())),m&&a){const C={boardId:a,title:r.title};await o(D(C)),u.success("Success! You've changed the board title."),l(),o(f()),o(F(a))}};return e.jsx(y,{modalId:t?"createNewBoard":`editBoard_${a}`,className:"",children:e.jsxs(e.Fragment,{children:[e.jsx("h4",{className:"font-medium text-[18px] mb-8",children:t?"Create new board":"Edit board"}),e.jsx(v,{...s,children:e.jsxs("form",{id:"board",className:"w-[250px] sm:w-[350px] flex flex-col gap-4",onSubmit:r=>r.preventDefault(),children:[e.jsx(I,{name:"title",defaultValue:m?c==null?void 0:c.title:"",control:s.control,rules:{required:!0},render:({field:r})=>e.jsx(A,{field:r,id:"title",placeholder:"Board title"})}),e.jsx(P,{type:"submit",label:t?"Create":"Submit",onClick:s.handleSubmit(g)})]})})]})})};n.__docgenInfo={description:"",methods:[],displayName:"BoardEditor",props:{isNew:{required:!1,tsType:{name:"boolean"},description:""},isEdit:{required:!1,tsType:{name:"boolean"},description:""},boardId:{required:!1,tsType:{name:"number"},description:""}}};const E=({children:t})=>e.jsx(N,{store:_,children:t}),Q={title:"Components/BoardEditor",component:n,parameters:{layout:"centered"}},d={render:()=>e.jsx(E,{children:e.jsx(n,{isNew:!0})})},i={render:()=>e.jsx(E,{children:e.jsx(n,{isEdit:!0,boardId:1})})};var x,B,h;d.parameters={...d.parameters,docs:{...(x=d.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: () => <MockedStore>\r
      <BoardEditor isNew />\r
    </MockedStore>
}`,...(h=(B=d.parameters)==null?void 0:B.docs)==null?void 0:h.source}}};var b,j,S;i.parameters={...i.parameters,docs:{...(b=i.parameters)==null?void 0:b.docs,source:{originalSource:`{
  render: () => <MockedStore>\r
      <BoardEditor isEdit boardId={1} />\r
    </MockedStore>
}`,...(S=(j=i.parameters)==null?void 0:j.docs)==null?void 0:S.source}}};const U=["CreateBoard","EditBoard"];export{d as CreateBoard,i as EditBoard,U as __namedExportsOrder,Q as default};
